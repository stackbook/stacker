/**
 * Ory Oathkeeper API
 * Documentation for all of Ory Oathkeeper\'s APIs.
 *
 * The version of the OpenAPI document: v1.11.7
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AcceptConsentRequest
 */
export interface AcceptConsentRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof AcceptConsentRequest
     */
    'grant_access_token_audience'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof AcceptConsentRequest
     */
    'grant_scope'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof AcceptConsentRequest
     */
    'handled_at'?: string;
    /**
     * Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     * @type {boolean}
     * @memberof AcceptConsentRequest
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
     * @type {number}
     * @memberof AcceptConsentRequest
     */
    'remember_for'?: number;
    /**
     *
     * @type {ConsentRequestSession}
     * @memberof AcceptConsentRequest
     */
    'session'?: ConsentRequestSession;
}
/**
 *
 * @export
 * @interface AcceptLoginRequest
 */
export interface AcceptLoginRequest {
    /**
     * ACR sets the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
     * @type {string}
     * @memberof AcceptLoginRequest
     */
    'acr'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof AcceptLoginRequest
     */
    'amr'?: Array<string>;
    /**
     *
     * @type {object}
     * @memberof AcceptLoginRequest
     */
    'context'?: object;
    /**
     * ForceSubjectIdentifier forces the \"pairwise\" user ID of the end-user that authenticated. The \"pairwise\" user ID refers to the (Pairwise Identifier Algorithm)[http://openid.net/specs/openid-connect-core-1_0.html#PairwiseAlg] of the OpenID Connect specification. It allows you to set an obfuscated subject (\"user\") identifier that is unique to the client.  Please note that this changes the user ID on endpoint /userinfo and sub claim of the ID Token. It does not change the sub claim in the OAuth 2.0 Introspection.  Per default, ORY Hydra handles this value with its own algorithm. In case you want to set this yourself you can use this field. Please note that setting this field has no effect if `pairwise` is not configured in ORY Hydra or the OAuth 2.0 Client does not expect a pairwise identifier (set via `subject_type` key in the client\'s configuration).  Please also be aware that ORY Hydra is unable to properly compute this value during authentication. This implies that you have to compute this value on every authentication process (probably depending on the client ID or some other unique value).  If you fail to compute the proper value, then authentication processes which have id_token_hint set might fail.
     * @type {string}
     * @memberof AcceptLoginRequest
     */
    'force_subject_identifier'?: string;
    /**
     * Remember, if set to true, tells ORY Hydra to remember this user by telling the user agent (browser) to store a cookie with authentication data. If the same user performs another OAuth 2.0 Authorization Request, he/she will not be asked to log in again.
     * @type {boolean}
     * @memberof AcceptLoginRequest
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the authentication should be remembered for in seconds. If set to `0`, the authorization will be remembered for the duration of the browser session (using a session cookie).
     * @type {number}
     * @memberof AcceptLoginRequest
     */
    'remember_for'?: number;
    /**
     * Subject is the user ID of the end-user that authenticated.
     * @type {string}
     * @memberof AcceptLoginRequest
     */
    'subject': string;
}
/**
 *
 * @export
 * @interface CompletedRequest
 */
export interface CompletedRequest {
    /**
     * RedirectURL is the URL which you should redirect the user to once the authentication process is completed.
     * @type {string}
     * @memberof CompletedRequest
     */
    'redirect_to': string;
}
/**
 *
 * @export
 * @interface ConsentRequest
 */
export interface ConsentRequest {
    /**
     * ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
     * @type {string}
     * @memberof ConsentRequest
     */
    'acr'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ConsentRequest
     */
    'amr'?: Array<string>;
    /**
     * ID is the identifier (\"authorization challenge\") of the consent authorization request. It is used to identify the session.
     * @type {string}
     * @memberof ConsentRequest
     */
    'challenge': string;
    /**
     *
     * @type {OAuth2Client}
     * @memberof ConsentRequest
     */
    'client'?: OAuth2Client;
    /**
     *
     * @type {object}
     * @memberof ConsentRequest
     */
    'context'?: object;
    /**
     * LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate a login and consent request in the login & consent app.
     * @type {string}
     * @memberof ConsentRequest
     */
    'login_challenge'?: string;
    /**
     * LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It\'s value can generally be used to associate consecutive login requests by a certain user.
     * @type {string}
     * @memberof ConsentRequest
     */
    'login_session_id'?: string;
    /**
     *
     * @type {OpenIDConnectContext}
     * @memberof ConsentRequest
     */
    'oidc_context'?: OpenIDConnectContext;
    /**
     * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
     * @type {string}
     * @memberof ConsentRequest
     */
    'request_url'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ConsentRequest
     */
    'requested_access_token_audience'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ConsentRequest
     */
    'requested_scope'?: Array<string>;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the consent request using the usual API call.
     * @type {boolean}
     * @memberof ConsentRequest
     */
    'skip'?: boolean;
    /**
     * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client.
     * @type {string}
     * @memberof ConsentRequest
     */
    'subject'?: string;
}
/**
 *
 * @export
 * @interface ConsentRequestSession
 */
export interface ConsentRequestSession {
    /**
     * AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the refresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection. If only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties can access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!
     * @type {{ [key: string]: object; }}
     * @memberof ConsentRequestSession
     */
    'access_token'?: {
        [key: string]: object;
    };
    /**
     * IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session\'id payloads are readable by anyone that has access to the ID Challenge. Use with care!
     * @type {{ [key: string]: object; }}
     * @memberof ConsentRequestSession
     */
    'id_token'?: {
        [key: string]: object;
    };
}
/**
 *
 * @export
 * @interface FlushInactiveOAuth2TokensRequest
 */
export interface FlushInactiveOAuth2TokensRequest {
    /**
     * NotAfter sets after which point tokens should not be flushed. This is useful when you want to keep a history of recently issued tokens for auditing.
     * @type {string}
     * @memberof FlushInactiveOAuth2TokensRequest
     */
    'notAfter'?: string;
}
/**
 *
 * @export
 * @interface FlushLoginConsentRequest
 */
export interface FlushLoginConsentRequest {
    /**
     * NotAfter sets after which point tokens should not be flushed. This is useful when you want to keep a history of recent login and consent database entries for auditing.
     * @type {string}
     * @memberof FlushLoginConsentRequest
     */
    'notAfter'?: string;
}
/**
 *
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * The status code
     * @type {number}
     * @memberof GenericError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof GenericError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: object; }}
     * @memberof GenericError
     */
    'details'?: {
        [key: string]: object;
    };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof GenericError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof GenericError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof GenericError
     */
    'reason'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof GenericError
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof GenericError
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface HealthNotReadyStatus
 */
export interface HealthNotReadyStatus {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof HealthNotReadyStatus
     */
    'errors'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface HealthStatus
 */
export interface HealthStatus {
    /**
     * Status always contains \"ok\".
     * @type {string}
     * @memberof HealthStatus
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * Always \"ok\".
     * @type {string}
     * @memberof InlineResponse200
     */
    'status': string;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * The version of Ory Hydra.
     * @type {string}
     * @memberof InlineResponse2001
     */
    'version': string;
}
/**
 *
 * @export
 * @interface InlineResponse503
 */
export interface InlineResponse503 {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof InlineResponse503
     */
    'errors': {
        [key: string]: string;
    };
}
/**
 * It is important that this model object is named JSONWebKey for \"swagger generate spec\" to generate only on definition of a JSONWebKey.
 * @export
 * @interface JSONWebKey
 */
export interface JSONWebKey {
    /**
     * The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.
     * @type {string}
     * @memberof JSONWebKey
     */
    'alg': string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'crv'?: string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'd'?: string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'dp'?: string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'dq'?: string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'e'?: string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'k'?: string;
    /**
     * The \"kid\" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the \"kid\" value is unspecified.  When \"kid\" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct \"kid\" values.  (One example in which different keys might use the same \"kid\" value is if they have different \"kty\" (key type) values but are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string.
     * @type {string}
     * @memberof JSONWebKey
     */
    'kid': string;
    /**
     * The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be registered in the IANA \"JSON Web Key Types\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The \"kty\" value is a case-sensitive string.
     * @type {string}
     * @memberof JSONWebKey
     */
    'kty': string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'n'?: string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'p'?: string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'q'?: string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'qi'?: string;
    /**
     * Use (\"public key use\") identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).
     * @type {string}
     * @memberof JSONWebKey
     */
    'use': string;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'x'?: string;
    /**
     * The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate.
     * @type {Array<string>}
     * @memberof JSONWebKey
     */
    'x5c'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JSONWebKey
     */
    'y'?: string;
}
/**
 * It is important that this model object is named JSONWebKeySet for \"swagger generate spec\" to generate only on definition of a JSONWebKeySet. Since one with the same name is previously defined as client.Client.JSONWebKeys and this one is last, this one will be effectively written in the swagger spec.
 * @export
 * @interface JSONWebKeySet
 */
export interface JSONWebKeySet {
    /**
     * The value of the \"keys\" parameter is an array of JWK values.  By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.
     * @type {Array<JSONWebKey>}
     * @memberof JSONWebKeySet
     */
    'keys'?: Array<JSONWebKey>;
}
/**
 * Error responses are sent when an error (e.g. unauthorized, bad request, ...) occurred.
 * @export
 * @interface JsonError
 */
export interface JsonError {
    /**
     * Name is the error name.
     * @type {string}
     * @memberof JsonError
     */
    'error'?: string;
    /**
     * Debug contains debug information. This is usually not available and has to be enabled.
     * @type {string}
     * @memberof JsonError
     */
    'error_debug'?: string;
    /**
     * Description contains further information on the nature of the error.
     * @type {string}
     * @memberof JsonError
     */
    'error_description'?: string;
    /**
     * Code represents the error status code (404, 403, 401, ...).
     * @type {number}
     * @memberof JsonError
     */
    'status_code'?: number;
}
/**
 *
 * @export
 * @interface JsonWebKeySetGeneratorRequest
 */
export interface JsonWebKeySetGeneratorRequest {
    /**
     * The algorithm to be used for creating the key. Supports \"RS256\", \"ES256\", \"ES512\", \"HS512\", and \"HS256\"
     * @type {string}
     * @memberof JsonWebKeySetGeneratorRequest
     */
    'alg': string;
    /**
     * The kid of the key to be created
     * @type {string}
     * @memberof JsonWebKeySetGeneratorRequest
     */
    'kid': string;
    /**
     * The \"use\" (public key use) parameter identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Valid values are \"enc\" and \"sig\".
     * @type {string}
     * @memberof JsonWebKeySetGeneratorRequest
     */
    'use': string;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * ID is the identifier (\"login challenge\") of the login request. It is used to identify the session.
     * @type {string}
     * @memberof LoginRequest
     */
    'challenge': string;
    /**
     *
     * @type {OAuth2Client}
     * @memberof LoginRequest
     */
    'client': OAuth2Client;
    /**
     *
     * @type {OpenIDConnectContext}
     * @memberof LoginRequest
     */
    'oidc_context'?: OpenIDConnectContext;
    /**
     * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
     * @type {string}
     * @memberof LoginRequest
     */
    'request_url': string;
    /**
     *
     * @type {Array<string>}
     * @memberof LoginRequest
     */
    'requested_access_token_audience': Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof LoginRequest
     */
    'requested_scope': Array<string>;
    /**
     * SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It\'s value can generally be used to associate consecutive login requests by a certain user.
     * @type {string}
     * @memberof LoginRequest
     */
    'session_id'?: string;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.
     * @type {boolean}
     * @memberof LoginRequest
     */
    'skip': boolean;
    /**
     * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and `skip` is true, you MUST include this subject type when accepting the login request, or the request will fail.
     * @type {string}
     * @memberof LoginRequest
     */
    'subject': string;
}
/**
 *
 * @export
 * @interface LogoutRequest
 */
export interface LogoutRequest {
    /**
     * Challenge is the identifier (\"logout challenge\") of the logout authentication request. It is used to identify the session.
     * @type {string}
     * @memberof LogoutRequest
     */
    'challenge'?: string;
    /**
     *
     * @type {OAuth2Client}
     * @memberof LogoutRequest
     */
    'client'?: OAuth2Client;
    /**
     * RequestURL is the original Logout URL requested.
     * @type {string}
     * @memberof LogoutRequest
     */
    'request_url'?: string;
    /**
     * RPInitiated is set to true if the request was initiated by a Relying Party (RP), also known as an OAuth 2.0 Client.
     * @type {boolean}
     * @memberof LogoutRequest
     */
    'rp_initiated'?: boolean;
    /**
     * SessionID is the login session ID that was requested to log out.
     * @type {string}
     * @memberof LogoutRequest
     */
    'sid'?: string;
    /**
     * Subject is the user for whom the logout was request.
     * @type {string}
     * @memberof LogoutRequest
     */
    'subject'?: string;
}
/**
 *
 * @export
 * @interface OAuth2Client
 */
export interface OAuth2Client {
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'allowed_cors_origins'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'audience'?: Array<string>;
    /**
     * Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
     * @type {boolean}
     * @memberof OAuth2Client
     */
    'backchannel_logout_session_required'?: boolean;
    /**
     * RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
     * @type {string}
     * @memberof OAuth2Client
     */
    'backchannel_logout_uri'?: string;
    /**
     * ID  is the id for this client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_id'?: string;
    /**
     * Name is the human-readable string name of the client to be presented to the end-user during authorization.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_name'?: string;
    /**
     * Secret is the client\'s secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_secret'?: string;
    /**
     * SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it\'s value will always be set to 0.
     * @type {number}
     * @memberof OAuth2Client
     */
    'client_secret_expires_at'?: number;
    /**
     * ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_uri'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'contacts'?: Array<string>;
    /**
     * CreatedAt returns the timestamp of the client\'s creation.
     * @type {string}
     * @memberof OAuth2Client
     */
    'created_at'?: string;
    /**
     * Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
     * @type {boolean}
     * @memberof OAuth2Client
     */
    'frontchannel_logout_session_required'?: boolean;
    /**
     * RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
     * @type {string}
     * @memberof OAuth2Client
     */
    'frontchannel_logout_uri'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'grant_types'?: Array<string>;
    /**
     *
     * @type {object}
     * @memberof OAuth2Client
     */
    'jwks'?: object;
    /**
     * URL for the Client\'s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client\'s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key\'s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     * @type {string}
     * @memberof OAuth2Client
     */
    'jwks_uri'?: string;
    /**
     * LogoURI is an URL string that references a logo for the client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'logo_uri'?: string;
    /**
     *
     * @type {object}
     * @memberof OAuth2Client
     */
    'metadata'?: object;
    /**
     * Owner is a string identifying the owner of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'owner'?: string;
    /**
     * PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
     * @type {string}
     * @memberof OAuth2Client
     */
    'policy_uri'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'post_logout_redirect_uris'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'redirect_uris'?: Array<string>;
    /**
     * RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'registration_access_token'?: string;
    /**
     * RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'registration_client_uri'?: string;
    /**
     * JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
     * @type {string}
     * @memberof OAuth2Client
     */
    'request_object_signing_alg'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'request_uris'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'response_types'?: Array<string>;
    /**
     * Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
     * @type {string}
     * @memberof OAuth2Client
     */
    'scope'?: string;
    /**
     * URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
     * @type {string}
     * @memberof OAuth2Client
     */
    'sector_identifier_uri'?: string;
    /**
     * SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
     * @type {string}
     * @memberof OAuth2Client
     */
    'subject_type'?: string;
    /**
     * Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none.
     * @type {string}
     * @memberof OAuth2Client
     */
    'token_endpoint_auth_method'?: string;
    /**
     * Requested Client Authentication signing algorithm for the Token Endpoint.
     * @type {string}
     * @memberof OAuth2Client
     */
    'token_endpoint_auth_signing_alg'?: string;
    /**
     * TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'tos_uri'?: string;
    /**
     * UpdatedAt returns the timestamp of the last update.
     * @type {string}
     * @memberof OAuth2Client
     */
    'updated_at'?: string;
    /**
     * JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
     * @type {string}
     * @memberof OAuth2Client
     */
    'userinfo_signed_response_alg'?: string;
}
/**
 * https://tools.ietf.org/html/rfc7662
 * @export
 * @interface OAuth2TokenIntrospection
 */
export interface OAuth2TokenIntrospection {
    /**
     * Active is a boolean indicator of whether or not the presented token is currently active.  The specifics of a token\'s \"active\" state will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a \"true\" value return for the \"active\" property will generally indicate that a given token has been issued by this authorization server, has not been revoked by the resource owner, and is within its given time window of validity (e.g., after its issuance time and before its expiration time).
     * @type {boolean}
     * @memberof OAuth2TokenIntrospection
     */
    'active': boolean;
    /**
     * Audience contains a list of the token\'s intended audiences.
     * @type {Array<string>}
     * @memberof OAuth2TokenIntrospection
     */
    'aud'?: Array<string>;
    /**
     * ID is aclient identifier for the OAuth 2.0 client that requested this token.
     * @type {string}
     * @memberof OAuth2TokenIntrospection
     */
    'client_id'?: string;
    /**
     * Expires at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire.
     * @type {number}
     * @memberof OAuth2TokenIntrospection
     */
    'exp'?: number;
    /**
     * Extra is arbitrary data set by the session.
     * @type {{ [key: string]: object; }}
     * @memberof OAuth2TokenIntrospection
     */
    'ext'?: {
        [key: string]: object;
    };
    /**
     * Issued at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued.
     * @type {number}
     * @memberof OAuth2TokenIntrospection
     */
    'iat'?: number;
    /**
     * IssuerURL is a string representing the issuer of this token
     * @type {string}
     * @memberof OAuth2TokenIntrospection
     */
    'iss'?: string;
    /**
     * NotBefore is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before.
     * @type {number}
     * @memberof OAuth2TokenIntrospection
     */
    'nbf'?: number;
    /**
     * ObfuscatedSubject is set when the subject identifier algorithm was set to \"pairwise\" during authorization. It is the `sub` value of the ID Token that was issued.
     * @type {string}
     * @memberof OAuth2TokenIntrospection
     */
    'obfuscated_subject'?: string;
    /**
     * Scope is a JSON string containing a space-separated list of scopes associated with this token.
     * @type {string}
     * @memberof OAuth2TokenIntrospection
     */
    'scope'?: string;
    /**
     * Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token.
     * @type {string}
     * @memberof OAuth2TokenIntrospection
     */
    'sub'?: string;
    /**
     * TokenType is the introspected token\'s type, typically `Bearer`.
     * @type {string}
     * @memberof OAuth2TokenIntrospection
     */
    'token_type'?: string;
    /**
     * TokenUse is the introspected token\'s use, for example `access_token` or `refresh_token`.
     * @type {string}
     * @memberof OAuth2TokenIntrospection
     */
    'token_use'?: string;
    /**
     * Username is a human-readable identifier for the resource owner who authorized this token.
     * @type {string}
     * @memberof OAuth2TokenIntrospection
     */
    'username'?: string;
}
/**
 * The Access Token Response
 * @export
 * @interface Oauth2TokenResponse
 */
export interface Oauth2TokenResponse {
    /**
     *
     * @type {string}
     * @memberof Oauth2TokenResponse
     */
    'access_token'?: string;
    /**
     *
     * @type {number}
     * @memberof Oauth2TokenResponse
     */
    'expires_in'?: number;
    /**
     *
     * @type {string}
     * @memberof Oauth2TokenResponse
     */
    'id_token'?: string;
    /**
     *
     * @type {string}
     * @memberof Oauth2TokenResponse
     */
    'refresh_token'?: string;
    /**
     *
     * @type {string}
     * @memberof Oauth2TokenResponse
     */
    'scope'?: string;
    /**
     *
     * @type {string}
     * @memberof Oauth2TokenResponse
     */
    'token_type'?: string;
}
/**
 * The token response
 * @export
 * @interface OauthTokenResponse
 */
export interface OauthTokenResponse {
    /**
     * The access token issued by the authorization server.
     * @type {string}
     * @memberof OauthTokenResponse
     */
    'access_token'?: string;
    /**
     * The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.
     * @type {number}
     * @memberof OauthTokenResponse
     */
    'expires_in'?: number;
    /**
     * To retrieve a refresh token request the id_token scope.
     * @type {number}
     * @memberof OauthTokenResponse
     */
    'id_token'?: number;
    /**
     * The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \"offline\" to your access token request.
     * @type {string}
     * @memberof OauthTokenResponse
     */
    'refresh_token'?: string;
    /**
     * The scope of the access token
     * @type {number}
     * @memberof OauthTokenResponse
     */
    'scope'?: number;
    /**
     * The type of the token issued
     * @type {string}
     * @memberof OauthTokenResponse
     */
    'token_type'?: string;
}
/**
 *
 * @export
 * @interface OpenIDConnectContext
 */
export interface OpenIDConnectContext {
    /**
     * ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: > Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.
     * @type {Array<string>}
     * @memberof OpenIDConnectContext
     */
    'acr_values'?: Array<string>;
    /**
     * Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.
     * @type {string}
     * @memberof OpenIDConnectContext
     */
    'display'?: string;
    /**
     * IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User\'s current or past authenticated session with the Client.
     * @type {{ [key: string]: object; }}
     * @memberof OpenIDConnectContext
     */
    'id_token_hint_claims'?: {
        [key: string]: object;
    };
    /**
     * LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.
     * @type {string}
     * @memberof OpenIDConnectContext
     */
    'login_hint'?: string;
    /**
     * UILocales is the End-User\'id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.
     * @type {Array<string>}
     * @memberof OpenIDConnectContext
     */
    'ui_locales'?: Array<string>;
}
/**
 * A JSONPatch document as defined by RFC 6902
 * @export
 * @interface PatchDocument
 */
export interface PatchDocument {
    /**
     * A JSON-pointer
     * @type {string}
     * @memberof PatchDocument
     */
    'from'?: string;
    /**
     * The operation to be performed
     * @type {string}
     * @memberof PatchDocument
     */
    'op': string;
    /**
     * A JSON-pointer
     * @type {string}
     * @memberof PatchDocument
     */
    'path': string;
    /**
     * The value to be used within the operations
     * @type {object}
     * @memberof PatchDocument
     */
    'value'?: object;
}
/**
 * The response used to return used consent requests same as HandledLoginRequest, just with consent_request exposed as json
 * @export
 * @interface PreviousConsentSession
 */
export interface PreviousConsentSession {
    /**
     *
     * @type {ConsentRequest}
     * @memberof PreviousConsentSession
     */
    'consent_request'?: ConsentRequest;
    /**
     *
     * @type {Array<string>}
     * @memberof PreviousConsentSession
     */
    'grant_access_token_audience'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof PreviousConsentSession
     */
    'grant_scope'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PreviousConsentSession
     */
    'handled_at'?: string;
    /**
     * Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     * @type {boolean}
     * @memberof PreviousConsentSession
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
     * @type {number}
     * @memberof PreviousConsentSession
     */
    'remember_for'?: number;
    /**
     *
     * @type {ConsentRequestSession}
     * @memberof PreviousConsentSession
     */
    'session'?: ConsentRequestSession;
}
/**
 *
 * @export
 * @interface RefreshTokenHookRequest
 */
export interface RefreshTokenHookRequest {
    /**
     * ClientID is the identifier of the OAuth 2.0 client.
     * @type {string}
     * @memberof RefreshTokenHookRequest
     */
    'client_id'?: string;
    /**
     * GrantedAudience is the list of audiences granted to the OAuth 2.0 client.
     * @type {Array<string>}
     * @memberof RefreshTokenHookRequest
     */
    'granted_audience'?: Array<string>;
    /**
     * GrantedScopes is the list of scopes granted to the OAuth 2.0 client.
     * @type {Array<string>}
     * @memberof RefreshTokenHookRequest
     */
    'granted_scopes'?: Array<string>;
    /**
     * Subject is the identifier of the authenticated end-user.
     * @type {string}
     * @memberof RefreshTokenHookRequest
     */
    'subject'?: string;
}
/**
 *
 * @export
 * @interface RefreshTokenHookResponse
 */
export interface RefreshTokenHookResponse {
    /**
     *
     * @type {ConsentRequestSession}
     * @memberof RefreshTokenHookResponse
     */
    'session'?: ConsentRequestSession;
}
/**
 *
 * @export
 * @interface RejectRequest
 */
export interface RejectRequest {
    /**
     * The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).  Defaults to `request_denied`.
     * @type {string}
     * @memberof RejectRequest
     */
    'error'?: string;
    /**
     * Debug contains information to help resolve the problem as a developer. Usually not exposed to the public but only in the server logs.
     * @type {string}
     * @memberof RejectRequest
     */
    'error_debug'?: string;
    /**
     * Description of the error in a human readable format.
     * @type {string}
     * @memberof RejectRequest
     */
    'error_description'?: string;
    /**
     * Hint to help resolve the error.
     * @type {string}
     * @memberof RejectRequest
     */
    'error_hint'?: string;
    /**
     * Represents the HTTP status code of the error (e.g. 401 or 403)  Defaults to 400
     * @type {number}
     * @memberof RejectRequest
     */
    'status_code'?: number;
}
/**
 *
 * @export
 * @interface RequestWasHandledResponse
 */
export interface RequestWasHandledResponse {
    /**
     * Original request URL to which you should redirect the user if request was already handled.
     * @type {string}
     * @memberof RequestWasHandledResponse
     */
    'redirect_to': string;
}
/**
 *
 * @export
 * @interface TrustJwtGrantIssuerBody
 */
export interface TrustJwtGrantIssuerBody {
    /**
     * The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\".
     * @type {string}
     * @memberof TrustJwtGrantIssuerBody
     */
    'expires_at': string;
    /**
     * The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT).
     * @type {string}
     * @memberof TrustJwtGrantIssuerBody
     */
    'issuer': string;
    /**
     *
     * @type {JSONWebKey}
     * @memberof TrustJwtGrantIssuerBody
     */
    'jwk': JSONWebKey;
    /**
     * The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
     * @type {Array<string>}
     * @memberof TrustJwtGrantIssuerBody
     */
    'scope': Array<string>;
    /**
     * The \"subject\" identifies the principal that is the subject of the JWT.
     * @type {string}
     * @memberof TrustJwtGrantIssuerBody
     */
    'subject': string;
}
/**
 *
 * @export
 * @interface TrustedJsonWebKey
 */
export interface TrustedJsonWebKey {
    /**
     * The \"key_id\" is key unique identifier (same as kid header in jws/jwt).
     * @type {string}
     * @memberof TrustedJsonWebKey
     */
    'kid'?: string;
    /**
     * The \"set\" is basically a name for a group(set) of keys. Will be the same as \"issuer\" in grant.
     * @type {string}
     * @memberof TrustedJsonWebKey
     */
    'set'?: string;
}
/**
 *
 * @export
 * @interface TrustedJwtGrantIssuer
 */
export interface TrustedJwtGrantIssuer {
    /**
     * The \"created_at\" indicates, when grant was created.
     * @type {string}
     * @memberof TrustedJwtGrantIssuer
     */
    'created_at'?: string;
    /**
     * The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\".
     * @type {string}
     * @memberof TrustedJwtGrantIssuer
     */
    'expires_at'?: string;
    /**
     *
     * @type {string}
     * @memberof TrustedJwtGrantIssuer
     */
    'id'?: string;
    /**
     * The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT).
     * @type {string}
     * @memberof TrustedJwtGrantIssuer
     */
    'issuer'?: string;
    /**
     *
     * @type {TrustedJsonWebKey}
     * @memberof TrustedJwtGrantIssuer
     */
    'public_key'?: TrustedJsonWebKey;
    /**
     * The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
     * @type {Array<string>}
     * @memberof TrustedJwtGrantIssuer
     */
    'scope'?: Array<string>;
    /**
     * The \"subject\" identifies the principal that is the subject of the JWT.
     * @type {string}
     * @memberof TrustedJwtGrantIssuer
     */
    'subject'?: string;
}
/**
 * The userinfo response
 * @export
 * @interface UserinfoResponse
 */
export interface UserinfoResponse {
    /**
     * End-User\'s birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform\'s date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'birthdate'?: string;
    /**
     * End-User\'s preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'email'?: string;
    /**
     * True if the End-User\'s e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
     * @type {boolean}
     * @memberof UserinfoResponse
     */
    'email_verified'?: boolean;
    /**
     * Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'family_name'?: string;
    /**
     * End-User\'s gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'gender'?: string;
    /**
     * Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'given_name'?: string;
    /**
     * End-User\'s locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'locale'?: string;
    /**
     * Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'middle_name'?: string;
    /**
     * End-User\'s full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User\'s locale and preferences.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'name'?: string;
    /**
     * Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'nickname'?: string;
    /**
     * End-User\'s preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'phone_number'?: string;
    /**
     * True if the End-User\'s phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
     * @type {boolean}
     * @memberof UserinfoResponse
     */
    'phone_number_verified'?: boolean;
    /**
     * URL of the End-User\'s profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'picture'?: string;
    /**
     * Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'preferred_username'?: string;
    /**
     * URL of the End-User\'s profile page. The contents of this Web page SHOULD be about the End-User.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'profile'?: string;
    /**
     * Subject - Identifier for the End-User at the IssuerURL.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'sub'?: string;
    /**
     * Time the End-User\'s information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
     * @type {number}
     * @memberof UserinfoResponse
     */
    'updated_at'?: number;
    /**
     * URL of the End-User\'s Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'website'?: string;
    /**
     * String from zoneinfo [zoneinfo] time zone database representing the End-User\'s time zone. For example, Europe/Paris or America/Los_Angeles.
     * @type {string}
     * @memberof UserinfoResponse
     */
    'zoneinfo'?: string;
}
/**
 *
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Version is the service\'s version.
     * @type {string}
     * @memberof Version
     */
    'version'?: string;
}
/**
 * It includes links to several endpoints (e.g. /oauth2/token) and exposes information on supported signature algorithms among others.
 * @export
 * @interface WellKnown
 */
export interface WellKnown {
    /**
     * URL of the OP\'s OAuth 2.0 Authorization Endpoint.
     * @type {string}
     * @memberof WellKnown
     */
    'authorization_endpoint': string;
    /**
     * Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP
     * @type {boolean}
     * @memberof WellKnown
     */
    'backchannel_logout_session_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP supports back-channel logout, with true indicating support.
     * @type {boolean}
     * @memberof WellKnown
     */
    'backchannel_logout_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
     * @type {boolean}
     * @memberof WellKnown
     */
    'claims_parameter_supported'?: boolean;
    /**
     * JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'claims_supported'?: Array<string>;
    /**
     * JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by this authorization server.
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'code_challenge_methods_supported'?: Array<string>;
    /**
     * URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.
     * @type {string}
     * @memberof WellKnown
     */
    'end_session_endpoint'?: string;
    /**
     * Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also included in ID Tokens issued by the OP.
     * @type {boolean}
     * @memberof WellKnown
     */
    'frontchannel_logout_session_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
     * @type {boolean}
     * @memberof WellKnown
     */
    'frontchannel_logout_supported'?: boolean;
    /**
     * JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'grant_types_supported'?: Array<string>;
    /**
     * JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'id_token_signing_alg_values_supported': Array<string>;
    /**
     * URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
     * @type {string}
     * @memberof WellKnown
     */
    'issuer': string;
    /**
     * URL of the OP\'s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server\'s encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key\'s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     * @type {string}
     * @memberof WellKnown
     */
    'jwks_uri': string;
    /**
     * URL of the OP\'s Dynamic Client Registration Endpoint.
     * @type {string}
     * @memberof WellKnown
     */
    'registration_endpoint'?: string;
    /**
     * JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'request_object_signing_alg_values_supported'?: Array<string>;
    /**
     * Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
     * @type {boolean}
     * @memberof WellKnown
     */
    'request_parameter_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
     * @type {boolean}
     * @memberof WellKnown
     */
    'request_uri_parameter_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.
     * @type {boolean}
     * @memberof WellKnown
     */
    'require_request_uri_registration'?: boolean;
    /**
     * JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'response_modes_supported'?: Array<string>;
    /**
     * JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'response_types_supported': Array<string>;
    /**
     * URL of the authorization server\'s OAuth 2.0 revocation endpoint.
     * @type {string}
     * @memberof WellKnown
     */
    'revocation_endpoint'?: string;
    /**
     * SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'scopes_supported'?: Array<string>;
    /**
     * JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'subject_types_supported': Array<string>;
    /**
     * URL of the OP\'s OAuth 2.0 Token Endpoint
     * @type {string}
     * @memberof WellKnown
     */
    'token_endpoint': string;
    /**
     * JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'token_endpoint_auth_methods_supported'?: Array<string>;
    /**
     * URL of the OP\'s UserInfo Endpoint.
     * @type {string}
     * @memberof WellKnown
     */
    'userinfo_endpoint'?: string;
    /**
     * JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
     * @type {Array<string>}
     * @memberof WellKnown
     */
    'userinfo_signing_alg_values_supported'?: Array<string>;
}
/**
 * AdminApi - axios parameter creator
 * @export
 */
export declare const AdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Consent Request
     * @param {string} consentChallenge
     * @param {AcceptConsentRequest} [acceptConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptConsentRequest: (consentChallenge: string, acceptConsentRequest?: AcceptConsentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept a Login Request
     * @param {string} loginChallenge
     * @param {AcceptLoginRequest} [acceptLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptLoginRequest: (loginChallenge: string, acceptLoginRequest?: AcceptLoginRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptLogoutRequest: (logoutChallenge: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The set
     * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJsonWebKeySet: (set: string, jsonWebKeySetGeneratorRequest?: JsonWebKeySetGeneratorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOAuth2Client: (oAuth2Client: OAuth2Client, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJsonWebKey: (kid: string, set: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJsonWebKeySet: (set: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuth2Client: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuth2Token: (clientId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrustedJwtGrantIssuer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     * @summary Flush Expired OAuth2 Access Tokens
     * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flushInactiveOAuth2Tokens: (flushInactiveOAuth2TokensRequest?: FlushInactiveOAuth2TokensRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsentRequest: (consentChallenge: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonWebKey: (kid: string, set: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonWebKeySet: (set: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get a Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoginRequest: (loginChallenge: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogoutRequest: (logoutChallenge: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOAuth2Client: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrustedJwtGrantIssuer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspectOAuth2Token: (token: string, scope?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} [offset] The offset from where to start looking.
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOAuth2Clients: (limit?: number, offset?: number, clientName?: string, owner?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary Lists All Consent Sessions of a Subject
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSubjectConsentSessions: (subject: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrustedJwtGrantIssuers: (issuer?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<PatchDocument>} patchDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOAuth2Client: (id: string, patchDocument: Array<PatchDocument>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject a Consent Request
     * @param {string} consentChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectConsentRequest: (consentChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject a Login Request
     * @param {string} loginChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectLoginRequest: (loginChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject a Logout Request
     * @param {string} logoutChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectLogoutRequest: (logoutChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeAuthenticationSession: (subject: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeConsentSessions: (subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustJwtGrantIssuer: (trustJwtGrantIssuerBody?: TrustJwtGrantIssuerBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {JSONWebKey} [jSONWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJsonWebKey: (kid: string, set: string, jSONWebKey?: JSONWebKey, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The set
     * @param {JSONWebKeySet} [jSONWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJsonWebKeySet: (set: string, jSONWebKeySet?: JSONWebKeySet, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuth2Client: (id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminApi - functional programming interface
 * @export
 */
export declare const AdminApiFp: (configuration?: Configuration) => {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Consent Request
     * @param {string} consentChallenge
     * @param {AcceptConsentRequest} [acceptConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptConsentRequest(consentChallenge: string, acceptConsentRequest?: AcceptConsentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletedRequest>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept a Login Request
     * @param {string} loginChallenge
     * @param {AcceptLoginRequest} [acceptLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptLoginRequest(loginChallenge: string, acceptLoginRequest?: AcceptLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletedRequest>>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptLogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletedRequest>>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The set
     * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJsonWebKeySet(set: string, jsonWebKeySetGeneratorRequest?: JsonWebKeySetGeneratorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONWebKeySet>>;
    /**
     * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJsonWebKey(kid: string, set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuth2Token(clientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrustedJwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     * @summary Flush Expired OAuth2 Access Tokens
     * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest?: FlushInactiveOAuth2TokensRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsentRequest(consentChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentRequest>>;
    /**
     * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonWebKey(kid: string, set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONWebKeySet>>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONWebKeySet>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get a Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoginRequest(loginChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginRequest>>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutRequest>>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrustedJwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedJwtGrantIssuer>>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspectOAuth2Token(token: string, scope?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2TokenIntrospection>>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} [offset] The offset from where to start looking.
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOAuth2Clients(limit?: number, offset?: number, clientName?: string, owner?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OAuth2Client>>>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary Lists All Consent Sessions of a Subject
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSubjectConsentSessions(subject: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PreviousConsentSession>>>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrustedJwtGrantIssuers(issuer?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrustedJwtGrantIssuer>>>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<PatchDocument>} patchDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOAuth2Client(id: string, patchDocument: Array<PatchDocument>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject a Consent Request
     * @param {string} consentChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectConsentRequest(consentChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletedRequest>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject a Login Request
     * @param {string} loginChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectLoginRequest(loginChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletedRequest>>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject a Logout Request
     * @param {string} logoutChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectLogoutRequest(logoutChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeAuthenticationSession(subject: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeConsentSessions(subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustJwtGrantIssuer(trustJwtGrantIssuerBody?: TrustJwtGrantIssuerBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedJwtGrantIssuer>>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {JSONWebKey} [jSONWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJsonWebKey(kid: string, set: string, jSONWebKey?: JSONWebKey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONWebKey>>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The set
     * @param {JSONWebKeySet} [jSONWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJsonWebKeySet(set: string, jSONWebKeySet?: JSONWebKeySet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONWebKeySet>>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
};
/**
 * AdminApi - factory interface
 * @export
 */
export declare const AdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Consent Request
     * @param {string} consentChallenge
     * @param {AcceptConsentRequest} [acceptConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptConsentRequest(consentChallenge: string, acceptConsentRequest?: AcceptConsentRequest, options?: any): AxiosPromise<CompletedRequest>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept a Login Request
     * @param {string} loginChallenge
     * @param {AcceptLoginRequest} [acceptLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptLoginRequest(loginChallenge: string, acceptLoginRequest?: AcceptLoginRequest, options?: any): AxiosPromise<CompletedRequest>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptLogoutRequest(logoutChallenge: string, options?: any): AxiosPromise<CompletedRequest>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The set
     * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJsonWebKeySet(set: string, jsonWebKeySetGeneratorRequest?: JsonWebKeySetGeneratorRequest, options?: any): AxiosPromise<JSONWebKeySet>;
    /**
     * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOAuth2Client(oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJsonWebKey(kid: string, set: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJsonWebKeySet(set: string, options?: any): AxiosPromise<void>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuth2Client(id: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuth2Token(clientId: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrustedJwtGrantIssuer(id: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     * @summary Flush Expired OAuth2 Access Tokens
     * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest?: FlushInactiveOAuth2TokensRequest, options?: any): AxiosPromise<void>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsentRequest(consentChallenge: string, options?: any): AxiosPromise<ConsentRequest>;
    /**
     * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonWebKey(kid: string, set: string, options?: any): AxiosPromise<JSONWebKeySet>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJsonWebKeySet(set: string, options?: any): AxiosPromise<JSONWebKeySet>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get a Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoginRequest(loginChallenge: string, options?: any): AxiosPromise<LoginRequest>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogoutRequest(logoutChallenge: string, options?: any): AxiosPromise<LogoutRequest>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOAuth2Client(id: string, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrustedJwtGrantIssuer(id: string, options?: any): AxiosPromise<TrustedJwtGrantIssuer>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspectOAuth2Token(token: string, scope?: string, options?: any): AxiosPromise<OAuth2TokenIntrospection>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} [offset] The offset from where to start looking.
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOAuth2Clients(limit?: number, offset?: number, clientName?: string, owner?: string, options?: any): AxiosPromise<Array<OAuth2Client>>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary Lists All Consent Sessions of a Subject
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSubjectConsentSessions(subject: string, options?: any): AxiosPromise<Array<PreviousConsentSession>>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrustedJwtGrantIssuers(issuer?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<TrustedJwtGrantIssuer>>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<PatchDocument>} patchDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOAuth2Client(id: string, patchDocument: Array<PatchDocument>, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject a Consent Request
     * @param {string} consentChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectConsentRequest(consentChallenge: string, rejectRequest?: RejectRequest, options?: any): AxiosPromise<CompletedRequest>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject a Login Request
     * @param {string} loginChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectLoginRequest(loginChallenge: string, rejectRequest?: RejectRequest, options?: any): AxiosPromise<CompletedRequest>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject a Logout Request
     * @param {string} logoutChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectLogoutRequest(logoutChallenge: string, rejectRequest?: RejectRequest, options?: any): AxiosPromise<void>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeAuthenticationSession(subject: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeConsentSessions(subject: string, client?: string, all?: boolean, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trustJwtGrantIssuer(trustJwtGrantIssuerBody?: TrustJwtGrantIssuerBody, options?: any): AxiosPromise<TrustedJwtGrantIssuer>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {JSONWebKey} [jSONWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJsonWebKey(kid: string, set: string, jSONWebKey?: JSONWebKey, options?: any): AxiosPromise<JSONWebKey>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The set
     * @param {JSONWebKeySet} [jSONWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJsonWebKeySet(set: string, jSONWebKeySet?: JSONWebKeySet, options?: any): AxiosPromise<JSONWebKeySet>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client>;
};
/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Consent Request
     * @param {string} consentChallenge
     * @param {AcceptConsentRequest} [acceptConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    acceptConsentRequest(consentChallenge: string, acceptConsentRequest?: AcceptConsentRequest, options?: AxiosRequestConfig): AxiosPromise<CompletedRequest>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept a Login Request
     * @param {string} loginChallenge
     * @param {AcceptLoginRequest} [acceptLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    acceptLoginRequest(loginChallenge: string, acceptLoginRequest?: AcceptLoginRequest, options?: AxiosRequestConfig): AxiosPromise<CompletedRequest>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    acceptLogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): AxiosPromise<CompletedRequest>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The set
     * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    createJsonWebKeySet(set: string, jsonWebKeySetGeneratorRequest?: JsonWebKeySetGeneratorRequest, options?: AxiosRequestConfig): AxiosPromise<JSONWebKeySet>;
    /**
     * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    createOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteJsonWebKey(kid: string, set: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteJsonWebKeySet(set: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteOAuth2Client(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteOAuth2Token(clientId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteTrustedJwtGrantIssuer(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     * @summary Flush Expired OAuth2 Access Tokens
     * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest?: FlushInactiveOAuth2TokensRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getConsentRequest(consentChallenge: string, options?: AxiosRequestConfig): AxiosPromise<ConsentRequest>;
    /**
     * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getJsonWebKey(kid: string, set: string, options?: AxiosRequestConfig): AxiosPromise<JSONWebKeySet>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getJsonWebKeySet(set: string, options?: AxiosRequestConfig): AxiosPromise<JSONWebKeySet>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get a Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getLoginRequest(loginChallenge: string, options?: AxiosRequestConfig): AxiosPromise<LoginRequest>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getLogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): AxiosPromise<LogoutRequest>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getOAuth2Client(id: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getTrustedJwtGrantIssuer(id: string, options?: AxiosRequestConfig): AxiosPromise<TrustedJwtGrantIssuer>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    introspectOAuth2Token(token: string, scope?: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2TokenIntrospection>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} [offset] The offset from where to start looking.
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listOAuth2Clients(limit?: number, offset?: number, clientName?: string, owner?: string, options?: AxiosRequestConfig): AxiosPromise<Array<OAuth2Client>>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary Lists All Consent Sessions of a Subject
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listSubjectConsentSessions(subject: string, options?: AxiosRequestConfig): AxiosPromise<Array<PreviousConsentSession>>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listTrustedJwtGrantIssuers(issuer?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<TrustedJwtGrantIssuer>>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<PatchDocument>} patchDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    patchOAuth2Client(id: string, patchDocument: Array<PatchDocument>, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject a Consent Request
     * @param {string} consentChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    rejectConsentRequest(consentChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): AxiosPromise<CompletedRequest>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject a Login Request
     * @param {string} loginChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    rejectLoginRequest(loginChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): AxiosPromise<CompletedRequest>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject a Logout Request
     * @param {string} logoutChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    rejectLogoutRequest(logoutChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    revokeAuthenticationSession(subject: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    revokeConsentSessions(subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    trustJwtGrantIssuer(trustJwtGrantIssuerBody?: TrustJwtGrantIssuerBody, options?: AxiosRequestConfig): AxiosPromise<TrustedJwtGrantIssuer>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {JSONWebKey} [jSONWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    updateJsonWebKey(kid: string, set: string, jSONWebKey?: JSONWebKey, options?: AxiosRequestConfig): AxiosPromise<JSONWebKey>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The set
     * @param {JSONWebKeySet} [jSONWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    updateJsonWebKeySet(set: string, jSONWebKeySet?: JSONWebKeySet, options?: AxiosRequestConfig): AxiosPromise<JSONWebKeySet>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    updateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
}
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export declare class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Consent Request
     * @param {string} consentChallenge
     * @param {AcceptConsentRequest} [acceptConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    acceptConsentRequest(consentChallenge: string, acceptConsentRequest?: AcceptConsentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompletedRequest>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept a Login Request
     * @param {string} loginChallenge
     * @param {AcceptLoginRequest} [acceptLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    acceptLoginRequest(loginChallenge: string, acceptLoginRequest?: AcceptLoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompletedRequest>>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    acceptLogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompletedRequest>>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The set
     * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createJsonWebKeySet(set: string, jsonWebKeySetGeneratorRequest?: JsonWebKeySetGeneratorRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JSONWebKeySet>>;
    /**
     * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteJsonWebKey(kid: string, set: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteOAuth2Token(clientId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteTrustedJwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     * @summary Flush Expired OAuth2 Access Tokens
     * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest?: FlushInactiveOAuth2TokensRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getConsentRequest(consentChallenge: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConsentRequest>>;
    /**
     * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getJsonWebKey(kid: string, set: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JSONWebKeySet>>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JSONWebKeySet>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get a Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getLoginRequest(loginChallenge: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LoginRequest>>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getLogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogoutRequest>>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getTrustedJwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TrustedJwtGrantIssuer>>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    introspectOAuth2Token(token: string, scope?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2TokenIntrospection>>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} [offset] The offset from where to start looking.
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listOAuth2Clients(limit?: number, offset?: number, clientName?: string, owner?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client[]>>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary Lists All Consent Sessions of a Subject
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listSubjectConsentSessions(subject: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PreviousConsentSession[]>>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listTrustedJwtGrantIssuers(issuer?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TrustedJwtGrantIssuer[]>>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<PatchDocument>} patchDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    patchOAuth2Client(id: string, patchDocument: Array<PatchDocument>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject a Consent Request
     * @param {string} consentChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    rejectConsentRequest(consentChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompletedRequest>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject a Login Request
     * @param {string} loginChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    rejectLoginRequest(loginChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompletedRequest>>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject a Logout Request
     * @param {string} logoutChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    rejectLogoutRequest(logoutChallenge: string, rejectRequest?: RejectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    revokeAuthenticationSession(subject: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    revokeConsentSessions(subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    trustJwtGrantIssuer(trustJwtGrantIssuerBody?: TrustJwtGrantIssuerBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TrustedJwtGrantIssuer>>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {JSONWebKey} [jSONWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateJsonWebKey(kid: string, set: string, jSONWebKey?: JSONWebKey, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JSONWebKey>>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The set
     * @param {JSONWebKeySet} [jSONWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateJsonWebKeySet(set: string, jSONWebKeySet?: JSONWebKeySet, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JSONWebKeySet>>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
}
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export declare const MetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
export declare const MetadataApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
};
/**
 * MetadataApi - factory interface
 * @export
 */
export declare const MetadataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion(options?: any): AxiosPromise<InlineResponse2001>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive(options?: any): AxiosPromise<InlineResponse200>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady(options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * MetadataApi - interface
 * @export
 * @interface MetadataApi
 */
export interface MetadataApiInterface {
    /**
     * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    getVersion(options?: AxiosRequestConfig): AxiosPromise<InlineResponse2001>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    isAlive(options?: AxiosRequestConfig): AxiosPromise<InlineResponse200>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    isReady(options?: AxiosRequestConfig): AxiosPromise<InlineResponse200>;
}
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export declare class MetadataApi extends BaseAPI implements MetadataApiInterface {
    /**
     * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getVersion(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InlineResponse2001>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    isAlive(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InlineResponse200>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    isReady(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InlineResponse200>>;
}
/**
 * PublicApi - axios parameter creator
 * @export
 */
export declare const PublicApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
     * @summary OpenID Connect Front-Backchannel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disconnectUser: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverOpenIDConfiguration: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationCreateOAuth2Client: (oAuth2Client: OAuth2Client, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationDeleteOAuth2Client: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationGetOAuth2Client: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationUpdateOAuth2Client: (id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2Token: (grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthAuth: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke OAuth2 Tokens
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeOAuth2Token: (token: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userinfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary JSON Web Keys Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnown: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PublicApi - functional programming interface
 * @export
 */
export declare const PublicApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
     * @summary OpenID Connect Front-Backchannel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disconnectUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverOpenIDConfiguration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WellKnown>>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationGetOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2Token(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Oauth2TokenResponse>>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthAuth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke OAuth2 Tokens
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeOAuth2Token(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userinfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserinfoResponse>>;
    /**
     * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary JSON Web Keys Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnown(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONWebKeySet>>;
};
/**
 * PublicApi - factory interface
 * @export
 */
export declare const PublicApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
     * @summary OpenID Connect Front-Backchannel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disconnectUser(options?: any): AxiosPromise<void>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverOpenIDConfiguration(options?: any): AxiosPromise<WellKnown>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationDeleteOAuth2Client(id: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationGetOAuth2Client(id: string, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2Token(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any): AxiosPromise<Oauth2TokenResponse>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthAuth(options?: any): AxiosPromise<void>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke OAuth2 Tokens
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeOAuth2Token(token: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userinfo(options?: any): AxiosPromise<UserinfoResponse>;
    /**
     * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary JSON Web Keys Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnown(options?: any): AxiosPromise<JSONWebKeySet>;
};
/**
 * PublicApi - interface
 * @export
 * @interface PublicApi
 */
export interface PublicApiInterface {
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
     * @summary OpenID Connect Front-Backchannel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    disconnectUser(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    discoverOpenIDConfiguration(options?: AxiosRequestConfig): AxiosPromise<WellKnown>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    dynamicClientRegistrationDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    dynamicClientRegistrationGetOAuth2Client(id: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    dynamicClientRegistrationUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    oauth2Token(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig): AxiosPromise<Oauth2TokenResponse>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    oauthAuth(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke OAuth2 Tokens
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    revokeOAuth2Token(token: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    userinfo(options?: AxiosRequestConfig): AxiosPromise<UserinfoResponse>;
    /**
     * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary JSON Web Keys Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    wellKnown(options?: AxiosRequestConfig): AxiosPromise<JSONWebKeySet>;
}
/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export declare class PublicApi extends BaseAPI implements PublicApiInterface {
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
     * @summary OpenID Connect Front-Backchannel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    disconnectUser(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    discoverOpenIDConfiguration(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WellKnown>>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    dynamicClientRegistrationDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    dynamicClientRegistrationGetOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    dynamicClientRegistrationUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    oauth2Token(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Oauth2TokenResponse>>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    oauthAuth(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke OAuth2 Tokens
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    revokeOAuth2Token(token: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    userinfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserinfoResponse>>;
    /**
     * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary JSON Web Keys Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    wellKnown(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JSONWebKeySet>>;
}
