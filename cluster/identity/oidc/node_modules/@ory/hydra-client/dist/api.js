"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Ory Oathkeeper API
 * Documentation for all of Ory Oathkeeper\'s APIs.
 *
 * The version of the OpenAPI document: v1.11.7
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicApi = exports.PublicApiFactory = exports.PublicApiFp = exports.PublicApiAxiosParamCreator = exports.MetadataApi = exports.MetadataApiFactory = exports.MetadataApiFp = exports.MetadataApiAxiosParamCreator = exports.AdminApi = exports.AdminApiFactory = exports.AdminApiFp = exports.AdminApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * AdminApi - axios parameter creator
 * @export
 */
exports.AdminApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept a Consent Request
         * @param {string} consentChallenge
         * @param {AcceptConsentRequest} [acceptConsentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptConsentRequest: (consentChallenge, acceptConsentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'consentChallenge' is not null or undefined
            common_1.assertParamExists('acceptConsentRequest', 'consentChallenge', consentChallenge);
            const localVarPath = `/oauth2/auth/requests/consent/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (consentChallenge !== undefined) {
                localVarQueryParameter['consent_challenge'] = consentChallenge;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(acceptConsentRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Accept a Login Request
         * @param {string} loginChallenge
         * @param {AcceptLoginRequest} [acceptLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptLoginRequest: (loginChallenge, acceptLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'loginChallenge' is not null or undefined
            common_1.assertParamExists('acceptLoginRequest', 'loginChallenge', loginChallenge);
            const localVarPath = `/oauth2/auth/requests/login/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (loginChallenge !== undefined) {
                localVarQueryParameter['login_challenge'] = loginChallenge;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(acceptLoginRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept a Logout Request
         * @param {string} logoutChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptLogoutRequest: (logoutChallenge, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'logoutChallenge' is not null or undefined
            common_1.assertParamExists('acceptLogoutRequest', 'logoutChallenge', logoutChallenge);
            const localVarPath = `/oauth2/auth/requests/logout/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (logoutChallenge !== undefined) {
                localVarQueryParameter['logout_challenge'] = logoutChallenge;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Generate a New JSON Web Key
         * @param {string} set The set
         * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJsonWebKeySet: (set, jsonWebKeySetGeneratorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'set' is not null or undefined
            common_1.assertParamExists('createJsonWebKeySet', 'set', set);
            const localVarPath = `/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(jsonWebKeySetGeneratorRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Create an OAuth 2.0 Client
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Client: (oAuth2Client, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'oAuth2Client' is not null or undefined
            common_1.assertParamExists('createOAuth2Client', 'oAuth2Client', oAuth2Client);
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(oAuth2Client, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKey: (kid, set, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'kid' is not null or undefined
            common_1.assertParamExists('deleteJsonWebKey', 'kid', kid);
            // verify required parameter 'set' is not null or undefined
            common_1.assertParamExists('deleteJsonWebKey', 'set', set);
            const localVarPath = `/keys/{set}/{kid}`
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)))
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete a JSON Web Key Set
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKeySet: (set, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'set' is not null or undefined
            common_1.assertParamExists('deleteJsonWebKeySet', 'set', set);
            const localVarPath = `/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
         * @summary Deletes an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Client: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('deleteOAuth2Client', 'id', id);
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint deletes OAuth2 access tokens issued for a client from the database
         * @summary Delete OAuth2 Access Tokens from a Client
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Token: (clientId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'clientId' is not null or undefined
            common_1.assertParamExists('deleteOAuth2Token', 'clientId', clientId);
            const localVarPath = `/oauth2/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
         * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrustedJwtGrantIssuer: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('deleteTrustedJwtGrantIssuer', 'id', id);
            const localVarPath = `/trust/grants/jwt-bearer/issuers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
         * @summary Flush Expired OAuth2 Access Tokens
         * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flushInactiveOAuth2Tokens: (flushInactiveOAuth2TokensRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/oauth2/flush`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(flushInactiveOAuth2TokensRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
         * @summary Get Consent Request Information
         * @param {string} consentChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentRequest: (consentChallenge, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'consentChallenge' is not null or undefined
            common_1.assertParamExists('getConsentRequest', 'consentChallenge', consentChallenge);
            const localVarPath = `/oauth2/auth/requests/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (consentChallenge !== undefined) {
                localVarQueryParameter['consent_challenge'] = consentChallenge;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
         * @summary Fetch a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKey: (kid, set, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'kid' is not null or undefined
            common_1.assertParamExists('getJsonWebKey', 'kid', kid);
            // verify required parameter 'set' is not null or undefined
            common_1.assertParamExists('getJsonWebKey', 'set', set);
            const localVarPath = `/keys/{set}/{kid}`
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)))
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Retrieve a JSON Web Key Set
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKeySet: (set, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'set' is not null or undefined
            common_1.assertParamExists('getJsonWebKeySet', 'set', set);
            const localVarPath = `/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
         * @summary Get a Login Request
         * @param {string} loginChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginRequest: (loginChallenge, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'loginChallenge' is not null or undefined
            common_1.assertParamExists('getLoginRequest', 'loginChallenge', loginChallenge);
            const localVarPath = `/oauth2/auth/requests/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (loginChallenge !== undefined) {
                localVarQueryParameter['login_challenge'] = loginChallenge;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this endpoint to fetch a logout request.
         * @summary Get a Logout Request
         * @param {string} logoutChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogoutRequest: (logoutChallenge, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'logoutChallenge' is not null or undefined
            common_1.assertParamExists('getLogoutRequest', 'logoutChallenge', logoutChallenge);
            const localVarPath = `/oauth2/auth/requests/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (logoutChallenge !== undefined) {
                localVarQueryParameter['logout_challenge'] = logoutChallenge;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2Client: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('getOAuth2Client', 'id', id);
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
         * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrustedJwtGrantIssuer: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('getTrustedJwtGrantIssuer', 'id', id);
            const localVarPath = `/trust/grants/jwt-bearer/issuers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
         * @summary Introspect OAuth2 Tokens
         * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
         * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectOAuth2Token: (token, scope, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'token' is not null or undefined
            common_1.assertParamExists('introspectOAuth2Token', 'token', token);
            const localVarPath = `/oauth2/introspect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (scope !== undefined) {
                localVarFormParams.set('scope', scope);
            }
            if (token !== undefined) {
                localVarFormParams.set('token', token);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
         * @summary List OAuth 2.0 Clients
         * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} [offset] The offset from where to start looking.
         * @param {string} [clientName] The name of the clients to filter by.
         * @param {string} [owner] The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2Clients: (limit, offset, clientName, owner, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (clientName !== undefined) {
                localVarQueryParameter['client_name'] = clientName;
            }
            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
         * @summary Lists All Consent Sessions of a Subject
         * @param {string} subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubjectConsentSessions: (subject, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subject' is not null or undefined
            common_1.assertParamExists('listSubjectConsentSessions', 'subject', subject);
            const localVarPath = `/oauth2/auth/sessions/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
         * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
         * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
         * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
         * @param {number} [offset] The offset from where to start looking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrustedJwtGrantIssuers: (issuer, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/trust/grants/jwt-bearer/issuers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (issuer !== undefined) {
                localVarQueryParameter['issuer'] = issuer;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Patch an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {Array<PatchDocument>} patchDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOAuth2Client: (id, patchDocument, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('patchOAuth2Client', 'id', id);
            // verify required parameter 'patchDocument' is not null or undefined
            common_1.assertParamExists('patchOAuth2Client', 'patchDocument', patchDocument);
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchDocument, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Reject a Consent Request
         * @param {string} consentChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectConsentRequest: (consentChallenge, rejectRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'consentChallenge' is not null or undefined
            common_1.assertParamExists('rejectConsentRequest', 'consentChallenge', consentChallenge);
            const localVarPath = `/oauth2/auth/requests/consent/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (consentChallenge !== undefined) {
                localVarQueryParameter['consent_challenge'] = consentChallenge;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(rejectRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Reject a Login Request
         * @param {string} loginChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectLoginRequest: (loginChallenge, rejectRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'loginChallenge' is not null or undefined
            common_1.assertParamExists('rejectLoginRequest', 'loginChallenge', loginChallenge);
            const localVarPath = `/oauth2/auth/requests/login/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (loginChallenge !== undefined) {
                localVarQueryParameter['login_challenge'] = loginChallenge;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(rejectRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
         * @summary Reject a Logout Request
         * @param {string} logoutChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectLogoutRequest: (logoutChallenge, rejectRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'logoutChallenge' is not null or undefined
            common_1.assertParamExists('rejectLogoutRequest', 'logoutChallenge', logoutChallenge);
            const localVarPath = `/oauth2/auth/requests/logout/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (logoutChallenge !== undefined) {
                localVarQueryParameter['logout_challenge'] = logoutChallenge;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(rejectRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
         * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
         * @param {string} subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAuthenticationSession: (subject, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subject' is not null or undefined
            common_1.assertParamExists('revokeAuthenticationSession', 'subject', subject);
            const localVarPath = `/oauth2/auth/sessions/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
         * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
         * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
         * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
         * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeConsentSessions: (subject, client, all, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subject' is not null or undefined
            common_1.assertParamExists('revokeConsentSessions', 'subject', subject);
            const localVarPath = `/oauth2/auth/sessions/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }
            if (client !== undefined) {
                localVarQueryParameter['client'] = client;
            }
            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
         * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
         * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trustJwtGrantIssuer: (trustJwtGrantIssuerBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/trust/grants/jwt-bearer/issuers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(trustJwtGrantIssuerBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {JSONWebKey} [jSONWebKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJsonWebKey: (kid, set, jSONWebKey, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'kid' is not null or undefined
            common_1.assertParamExists('updateJsonWebKey', 'kid', kid);
            // verify required parameter 'set' is not null or undefined
            common_1.assertParamExists('updateJsonWebKey', 'set', set);
            const localVarPath = `/keys/{set}/{kid}`
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)))
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(jSONWebKey, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key Set
         * @param {string} set The set
         * @param {JSONWebKeySet} [jSONWebKeySet]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJsonWebKeySet: (set, jSONWebKeySet, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'set' is not null or undefined
            common_1.assertParamExists('updateJsonWebKeySet', 'set', set);
            const localVarPath = `/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(jSONWebKeySet, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Update an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOAuth2Client: (id, oAuth2Client, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('updateOAuth2Client', 'id', id);
            // verify required parameter 'oAuth2Client' is not null or undefined
            common_1.assertParamExists('updateOAuth2Client', 'oAuth2Client', oAuth2Client);
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(oAuth2Client, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AdminApi - functional programming interface
 * @export
 */
exports.AdminApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AdminApiAxiosParamCreator(configuration);
    return {
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept a Consent Request
         * @param {string} consentChallenge
         * @param {AcceptConsentRequest} [acceptConsentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptConsentRequest(consentChallenge, acceptConsentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acceptConsentRequest(consentChallenge, acceptConsentRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Accept a Login Request
         * @param {string} loginChallenge
         * @param {AcceptLoginRequest} [acceptLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptLoginRequest(loginChallenge, acceptLoginRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acceptLoginRequest(loginChallenge, acceptLoginRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept a Logout Request
         * @param {string} logoutChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptLogoutRequest(logoutChallenge, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acceptLogoutRequest(logoutChallenge, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Generate a New JSON Web Key
         * @param {string} set The set
         * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJsonWebKeySet(set, jsonWebKeySetGeneratorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createJsonWebKeySet(set, jsonWebKeySetGeneratorRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Create an OAuth 2.0 Client
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Client(oAuth2Client, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createOAuth2Client(oAuth2Client, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKey(kid, set, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteJsonWebKey(kid, set, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete a JSON Web Key Set
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKeySet(set, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteJsonWebKeySet(set, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
         * @summary Deletes an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Client(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOAuth2Client(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint deletes OAuth2 access tokens issued for a client from the database
         * @summary Delete OAuth2 Access Tokens from a Client
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Token(clientId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOAuth2Token(clientId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
         * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrustedJwtGrantIssuer(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteTrustedJwtGrantIssuer(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
         * @summary Flush Expired OAuth2 Access Tokens
         * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
         * @summary Get Consent Request Information
         * @param {string} consentChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentRequest(consentChallenge, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConsentRequest(consentChallenge, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
         * @summary Fetch a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKey(kid, set, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getJsonWebKey(kid, set, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Retrieve a JSON Web Key Set
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKeySet(set, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getJsonWebKeySet(set, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
         * @summary Get a Login Request
         * @param {string} loginChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginRequest(loginChallenge, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getLoginRequest(loginChallenge, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this endpoint to fetch a logout request.
         * @summary Get a Logout Request
         * @param {string} logoutChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogoutRequest(logoutChallenge, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getLogoutRequest(logoutChallenge, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2Client(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOAuth2Client(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
         * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrustedJwtGrantIssuer(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTrustedJwtGrantIssuer(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
         * @summary Introspect OAuth2 Tokens
         * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
         * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectOAuth2Token(token, scope, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.introspectOAuth2Token(token, scope, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
         * @summary List OAuth 2.0 Clients
         * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} [offset] The offset from where to start looking.
         * @param {string} [clientName] The name of the clients to filter by.
         * @param {string} [owner] The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2Clients(limit, offset, clientName, owner, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listOAuth2Clients(limit, offset, clientName, owner, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
         * @summary Lists All Consent Sessions of a Subject
         * @param {string} subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubjectConsentSessions(subject, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSubjectConsentSessions(subject, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
         * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
         * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
         * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
         * @param {number} [offset] The offset from where to start looking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrustedJwtGrantIssuers(issuer, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listTrustedJwtGrantIssuers(issuer, limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Patch an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {Array<PatchDocument>} patchDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOAuth2Client(id, patchDocument, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchOAuth2Client(id, patchDocument, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Reject a Consent Request
         * @param {string} consentChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectConsentRequest(consentChallenge, rejectRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rejectConsentRequest(consentChallenge, rejectRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Reject a Login Request
         * @param {string} loginChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectLoginRequest(loginChallenge, rejectRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rejectLoginRequest(loginChallenge, rejectRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
         * @summary Reject a Logout Request
         * @param {string} logoutChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectLogoutRequest(logoutChallenge, rejectRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rejectLogoutRequest(logoutChallenge, rejectRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
         * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
         * @param {string} subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAuthenticationSession(subject, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.revokeAuthenticationSession(subject, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
         * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
         * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
         * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
         * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeConsentSessions(subject, client, all, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.revokeConsentSessions(subject, client, all, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
         * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
         * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trustJwtGrantIssuer(trustJwtGrantIssuerBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.trustJwtGrantIssuer(trustJwtGrantIssuerBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {JSONWebKey} [jSONWebKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJsonWebKey(kid, set, jSONWebKey, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateJsonWebKey(kid, set, jSONWebKey, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key Set
         * @param {string} set The set
         * @param {JSONWebKeySet} [jSONWebKeySet]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJsonWebKeySet(set, jSONWebKeySet, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateJsonWebKeySet(set, jSONWebKeySet, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Update an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOAuth2Client(id, oAuth2Client, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateOAuth2Client(id, oAuth2Client, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AdminApi - factory interface
 * @export
 */
exports.AdminApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AdminApiFp(configuration);
    return {
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept a Consent Request
         * @param {string} consentChallenge
         * @param {AcceptConsentRequest} [acceptConsentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptConsentRequest(consentChallenge, acceptConsentRequest, options) {
            return localVarFp.acceptConsentRequest(consentChallenge, acceptConsentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Accept a Login Request
         * @param {string} loginChallenge
         * @param {AcceptLoginRequest} [acceptLoginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptLoginRequest(loginChallenge, acceptLoginRequest, options) {
            return localVarFp.acceptLoginRequest(loginChallenge, acceptLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept a Logout Request
         * @param {string} logoutChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptLogoutRequest(logoutChallenge, options) {
            return localVarFp.acceptLogoutRequest(logoutChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Generate a New JSON Web Key
         * @param {string} set The set
         * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJsonWebKeySet(set, jsonWebKeySetGeneratorRequest, options) {
            return localVarFp.createJsonWebKeySet(set, jsonWebKeySetGeneratorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Create an OAuth 2.0 Client
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Client(oAuth2Client, options) {
            return localVarFp.createOAuth2Client(oAuth2Client, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKey(kid, set, options) {
            return localVarFp.deleteJsonWebKey(kid, set, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete a JSON Web Key Set
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKeySet(set, options) {
            return localVarFp.deleteJsonWebKeySet(set, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
         * @summary Deletes an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Client(id, options) {
            return localVarFp.deleteOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes OAuth2 access tokens issued for a client from the database
         * @summary Delete OAuth2 Access Tokens from a Client
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Token(clientId, options) {
            return localVarFp.deleteOAuth2Token(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
         * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrustedJwtGrantIssuer(id, options) {
            return localVarFp.deleteTrustedJwtGrantIssuer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
         * @summary Flush Expired OAuth2 Access Tokens
         * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest, options) {
            return localVarFp.flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
         * @summary Get Consent Request Information
         * @param {string} consentChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentRequest(consentChallenge, options) {
            return localVarFp.getConsentRequest(consentChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
         * @summary Fetch a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKey(kid, set, options) {
            return localVarFp.getJsonWebKey(kid, set, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Retrieve a JSON Web Key Set
         * @param {string} set The set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKeySet(set, options) {
            return localVarFp.getJsonWebKeySet(set, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
         * @summary Get a Login Request
         * @param {string} loginChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginRequest(loginChallenge, options) {
            return localVarFp.getLoginRequest(loginChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to fetch a logout request.
         * @summary Get a Logout Request
         * @param {string} logoutChallenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogoutRequest(logoutChallenge, options) {
            return localVarFp.getLogoutRequest(logoutChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2Client(id, options) {
            return localVarFp.getOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
         * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrustedJwtGrantIssuer(id, options) {
            return localVarFp.getTrustedJwtGrantIssuer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
         * @summary Introspect OAuth2 Tokens
         * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
         * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectOAuth2Token(token, scope, options) {
            return localVarFp.introspectOAuth2Token(token, scope, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
         * @summary List OAuth 2.0 Clients
         * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} [offset] The offset from where to start looking.
         * @param {string} [clientName] The name of the clients to filter by.
         * @param {string} [owner] The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2Clients(limit, offset, clientName, owner, options) {
            return localVarFp.listOAuth2Clients(limit, offset, clientName, owner, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
         * @summary Lists All Consent Sessions of a Subject
         * @param {string} subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubjectConsentSessions(subject, options) {
            return localVarFp.listSubjectConsentSessions(subject, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
         * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
         * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
         * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
         * @param {number} [offset] The offset from where to start looking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrustedJwtGrantIssuers(issuer, limit, offset, options) {
            return localVarFp.listTrustedJwtGrantIssuers(issuer, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Patch an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {Array<PatchDocument>} patchDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOAuth2Client(id, patchDocument, options) {
            return localVarFp.patchOAuth2Client(id, patchDocument, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Reject a Consent Request
         * @param {string} consentChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectConsentRequest(consentChallenge, rejectRequest, options) {
            return localVarFp.rejectConsentRequest(consentChallenge, rejectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Reject a Login Request
         * @param {string} loginChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectLoginRequest(loginChallenge, rejectRequest, options) {
            return localVarFp.rejectLoginRequest(loginChallenge, rejectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
         * @summary Reject a Logout Request
         * @param {string} logoutChallenge
         * @param {RejectRequest} [rejectRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectLogoutRequest(logoutChallenge, rejectRequest, options) {
            return localVarFp.rejectLogoutRequest(logoutChallenge, rejectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
         * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
         * @param {string} subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAuthenticationSession(subject, options) {
            return localVarFp.revokeAuthenticationSession(subject, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
         * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
         * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
         * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
         * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeConsentSessions(subject, client, all, options) {
            return localVarFp.revokeConsentSessions(subject, client, all, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
         * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
         * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trustJwtGrantIssuer(trustJwtGrantIssuerBody, options) {
            return localVarFp.trustJwtGrantIssuer(trustJwtGrantIssuerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key
         * @param {string} kid The kid of the desired key
         * @param {string} set The set
         * @param {JSONWebKey} [jSONWebKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJsonWebKey(kid, set, jSONWebKey, options) {
            return localVarFp.updateJsonWebKey(kid, set, jSONWebKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key Set
         * @param {string} set The set
         * @param {JSONWebKeySet} [jSONWebKeySet]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJsonWebKeySet(set, jSONWebKeySet, options) {
            return localVarFp.updateJsonWebKeySet(set, jSONWebKeySet, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Update an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOAuth2Client(id, oAuth2Client, options) {
            return localVarFp.updateOAuth2Client(id, oAuth2Client, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
class AdminApi extends base_1.BaseAPI {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Consent Request
     * @param {string} consentChallenge
     * @param {AcceptConsentRequest} [acceptConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    acceptConsentRequest(consentChallenge, acceptConsentRequest, options) {
        return exports.AdminApiFp(this.configuration).acceptConsentRequest(consentChallenge, acceptConsentRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept a Login Request
     * @param {string} loginChallenge
     * @param {AcceptLoginRequest} [acceptLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    acceptLoginRequest(loginChallenge, acceptLoginRequest, options) {
        return exports.AdminApiFp(this.configuration).acceptLoginRequest(loginChallenge, acceptLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    acceptLogoutRequest(logoutChallenge, options) {
        return exports.AdminApiFp(this.configuration).acceptLogoutRequest(logoutChallenge, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The set
     * @param {JsonWebKeySetGeneratorRequest} [jsonWebKeySetGeneratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createJsonWebKeySet(set, jsonWebKeySetGeneratorRequest, options) {
        return exports.AdminApiFp(this.configuration).createJsonWebKeySet(set, jsonWebKeySetGeneratorRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createOAuth2Client(oAuth2Client, options) {
        return exports.AdminApiFp(this.configuration).createOAuth2Client(oAuth2Client, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteJsonWebKey(kid, set, options) {
        return exports.AdminApiFp(this.configuration).deleteJsonWebKey(kid, set, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteJsonWebKeySet(set, options) {
        return exports.AdminApiFp(this.configuration).deleteJsonWebKeySet(set, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteOAuth2Client(id, options) {
        return exports.AdminApiFp(this.configuration).deleteOAuth2Client(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteOAuth2Token(clientId, options) {
        return exports.AdminApiFp(this.configuration).deleteOAuth2Token(clientId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteTrustedJwtGrantIssuer(id, options) {
        return exports.AdminApiFp(this.configuration).deleteTrustedJwtGrantIssuer(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     * @summary Flush Expired OAuth2 Access Tokens
     * @param {FlushInactiveOAuth2TokensRequest} [flushInactiveOAuth2TokensRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest, options) {
        return exports.AdminApiFp(this.configuration).flushInactiveOAuth2Tokens(flushInactiveOAuth2TokensRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getConsentRequest(consentChallenge, options) {
        return exports.AdminApiFp(this.configuration).getConsentRequest(consentChallenge, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getJsonWebKey(kid, set, options) {
        return exports.AdminApiFp(this.configuration).getJsonWebKey(kid, set, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getJsonWebKeySet(set, options) {
        return exports.AdminApiFp(this.configuration).getJsonWebKeySet(set, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get a Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getLoginRequest(loginChallenge, options) {
        return exports.AdminApiFp(this.configuration).getLoginRequest(loginChallenge, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get a Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getLogoutRequest(logoutChallenge, options) {
        return exports.AdminApiFp(this.configuration).getLogoutRequest(logoutChallenge, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getOAuth2Client(id, options) {
        return exports.AdminApiFp(this.configuration).getOAuth2Client(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getTrustedJwtGrantIssuer(id, options) {
        return exports.AdminApiFp(this.configuration).getTrustedJwtGrantIssuer(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    introspectOAuth2Token(token, scope, options) {
        return exports.AdminApiFp(this.configuration).introspectOAuth2Token(token, scope, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [limit] The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} [offset] The offset from where to start looking.
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listOAuth2Clients(limit, offset, clientName, owner, options) {
        return exports.AdminApiFp(this.configuration).listOAuth2Clients(limit, offset, clientName, owner, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary Lists All Consent Sessions of a Subject
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listSubjectConsentSessions(subject, options) {
        return exports.AdminApiFp(this.configuration).listSubjectConsentSessions(subject, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listTrustedJwtGrantIssuers(issuer, limit, offset, options) {
        return exports.AdminApiFp(this.configuration).listTrustedJwtGrantIssuers(issuer, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<PatchDocument>} patchDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    patchOAuth2Client(id, patchDocument, options) {
        return exports.AdminApiFp(this.configuration).patchOAuth2Client(id, patchDocument, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject a Consent Request
     * @param {string} consentChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    rejectConsentRequest(consentChallenge, rejectRequest, options) {
        return exports.AdminApiFp(this.configuration).rejectConsentRequest(consentChallenge, rejectRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject a Login Request
     * @param {string} loginChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    rejectLoginRequest(loginChallenge, rejectRequest, options) {
        return exports.AdminApiFp(this.configuration).rejectLoginRequest(loginChallenge, rejectRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject a Logout Request
     * @param {string} logoutChallenge
     * @param {RejectRequest} [rejectRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    rejectLogoutRequest(logoutChallenge, rejectRequest, options) {
        return exports.AdminApiFp(this.configuration).rejectLogoutRequest(logoutChallenge, rejectRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All Login Sessions of a Certain User Invalidates a Subject\'s Authentication Session
     * @param {string} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    revokeAuthenticationSession(subject, options) {
        return exports.AdminApiFp(this.configuration).revokeAuthenticationSession(subject, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) who\&#39;s consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    revokeConsentSessions(subject, client, all, options) {
        return exports.AdminApiFp(this.configuration).revokeConsentSessions(subject, client, all, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {TrustJwtGrantIssuerBody} [trustJwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    trustJwtGrantIssuer(trustJwtGrantIssuerBody, options) {
        return exports.AdminApiFp(this.configuration).trustJwtGrantIssuer(trustJwtGrantIssuerBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} kid The kid of the desired key
     * @param {string} set The set
     * @param {JSONWebKey} [jSONWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateJsonWebKey(kid, set, jSONWebKey, options) {
        return exports.AdminApiFp(this.configuration).updateJsonWebKey(kid, set, jSONWebKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The set
     * @param {JSONWebKeySet} [jSONWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateJsonWebKeySet(set, jSONWebKeySet, options) {
        return exports.AdminApiFp(this.configuration).updateJsonWebKeySet(set, jSONWebKeySet, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateOAuth2Client(id, oAuth2Client, options) {
        return exports.AdminApiFp(this.configuration).updateOAuth2Client(id, oAuth2Client, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AdminApi = AdminApi;
/**
 * MetadataApi - axios parameter creator
 * @export
 */
exports.MetadataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAlive: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/health/alive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isReady: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/health/ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
exports.MetadataApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.MetadataApiAxiosParamCreator(configuration);
    return {
        /**
         * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVersion(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAlive(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.isAlive(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isReady(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.isReady(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * MetadataApi - factory interface
 * @export
 */
exports.MetadataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.MetadataApiFp(configuration);
    return {
        /**
         * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options) {
            return localVarFp.getVersion(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAlive(options) {
            return localVarFp.isAlive(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isReady(options) {
            return localVarFp.isReady(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
class MetadataApi extends base_1.BaseAPI {
    /**
     * This endpoint returns the version of Ory Hydra.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getVersion(options) {
        return exports.MetadataApiFp(this.configuration).getVersion(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    isAlive(options) {
        return exports.MetadataApiFp(this.configuration).isAlive(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Hydra, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    isReady(options) {
        return exports.MetadataApiFp(this.configuration).isReady(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MetadataApi = MetadataApi;
/**
 * PublicApi - axios parameter creator
 * @export
 */
exports.PublicApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
         * @summary OpenID Connect Front-Backchannel Enabled Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disconnectUser: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/oauth2/sessions/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
         * @summary OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverOpenIDConfiguration: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/.well-known/openid-configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
         * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationCreateOAuth2Client: (oAuth2Client, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'oAuth2Client' is not null or undefined
            common_1.assertParamExists('dynamicClientRegistrationCreateOAuth2Client', 'oAuth2Client', oAuth2Client);
            const localVarPath = `/connect/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(oAuth2Client, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationDeleteOAuth2Client: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('dynamicClientRegistrationDeleteOAuth2Client', 'id', id);
            const localVarPath = `/connect/register/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationGetOAuth2Client: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('dynamicClientRegistrationGetOAuth2Client', 'id', id);
            const localVarPath = `/connect/register/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationUpdateOAuth2Client: (id, oAuth2Client, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('dynamicClientRegistrationUpdateOAuth2Client', 'id', id);
            // verify required parameter 'oAuth2Client' is not null or undefined
            common_1.assertParamExists('dynamicClientRegistrationUpdateOAuth2Client', 'oAuth2Client', oAuth2Client);
            const localVarPath = `/connect/register/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(oAuth2Client, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
         * @summary The OAuth 2.0 Token Endpoint
         * @param {string} grantType
         * @param {string} [clientId]
         * @param {string} [code]
         * @param {string} [redirectUri]
         * @param {string} [refreshToken]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2Token: (grantType, clientId, code, redirectUri, refreshToken, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'grantType' is not null or undefined
            common_1.assertParamExists('oauth2Token', 'grantType', grantType);
            const localVarPath = `/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            // authentication basic required
            // http basic authentication required
            common_1.setBasicAuthToObject(localVarRequestOptions, configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration);
            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId);
            }
            if (code !== undefined) {
                localVarFormParams.set('code', code);
            }
            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', grantType);
            }
            if (redirectUri !== undefined) {
                localVarFormParams.set('redirect_uri', redirectUri);
            }
            if (refreshToken !== undefined) {
                localVarFormParams.set('refresh_token', refreshToken);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
         * @summary The OAuth 2.0 Authorize Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuth: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/oauth2/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
         * @summary Revoke OAuth2 Tokens
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2Token: (token, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'token' is not null or undefined
            common_1.assertParamExists('revokeOAuth2Token', 'token', token);
            const localVarPath = `/oauth2/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            // authentication basic required
            // http basic authentication required
            common_1.setBasicAuthToObject(localVarRequestOptions, configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration);
            if (token !== undefined) {
                localVarFormParams.set('token', token);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
         * @summary OpenID Connect Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfo: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/userinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
         * @summary JSON Web Keys Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnown: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/.well-known/jwks.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PublicApi - functional programming interface
 * @export
 */
exports.PublicApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.PublicApiAxiosParamCreator(configuration);
    return {
        /**
         * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
         * @summary OpenID Connect Front-Backchannel Enabled Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disconnectUser(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.disconnectUser(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
         * @summary OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverOpenIDConfiguration(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.discoverOpenIDConfiguration(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
         * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationCreateOAuth2Client(oAuth2Client, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.dynamicClientRegistrationCreateOAuth2Client(oAuth2Client, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationDeleteOAuth2Client(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.dynamicClientRegistrationDeleteOAuth2Client(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationGetOAuth2Client(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.dynamicClientRegistrationGetOAuth2Client(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationUpdateOAuth2Client(id, oAuth2Client, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.dynamicClientRegistrationUpdateOAuth2Client(id, oAuth2Client, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
         * @summary The OAuth 2.0 Token Endpoint
         * @param {string} grantType
         * @param {string} [clientId]
         * @param {string} [code]
         * @param {string} [redirectUri]
         * @param {string} [refreshToken]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2Token(grantType, clientId, code, redirectUri, refreshToken, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.oauth2Token(grantType, clientId, code, redirectUri, refreshToken, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
         * @summary The OAuth 2.0 Authorize Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuth(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.oauthAuth(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
         * @summary Revoke OAuth2 Tokens
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2Token(token, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.revokeOAuth2Token(token, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
         * @summary OpenID Connect Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfo(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userinfo(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
         * @summary JSON Web Keys Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnown(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.wellKnown(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * PublicApi - factory interface
 * @export
 */
exports.PublicApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.PublicApiFp(configuration);
    return {
        /**
         * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
         * @summary OpenID Connect Front-Backchannel Enabled Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disconnectUser(options) {
            return localVarFp.disconnectUser(options).then((request) => request(axios, basePath));
        },
        /**
         * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
         * @summary OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverOpenIDConfiguration(options) {
            return localVarFp.discoverOpenIDConfiguration(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
         * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationCreateOAuth2Client(oAuth2Client, options) {
            return localVarFp.dynamicClientRegistrationCreateOAuth2Client(oAuth2Client, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationDeleteOAuth2Client(id, options) {
            return localVarFp.dynamicClientRegistrationDeleteOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationGetOAuth2Client(id, options) {
            return localVarFp.dynamicClientRegistrationGetOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {OAuth2Client} oAuth2Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dynamicClientRegistrationUpdateOAuth2Client(id, oAuth2Client, options) {
            return localVarFp.dynamicClientRegistrationUpdateOAuth2Client(id, oAuth2Client, options).then((request) => request(axios, basePath));
        },
        /**
         * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
         * @summary The OAuth 2.0 Token Endpoint
         * @param {string} grantType
         * @param {string} [clientId]
         * @param {string} [code]
         * @param {string} [redirectUri]
         * @param {string} [refreshToken]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2Token(grantType, clientId, code, redirectUri, refreshToken, options) {
            return localVarFp.oauth2Token(grantType, clientId, code, redirectUri, refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
         * @summary The OAuth 2.0 Authorize Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuth(options) {
            return localVarFp.oauthAuth(options).then((request) => request(axios, basePath));
        },
        /**
         * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
         * @summary Revoke OAuth2 Tokens
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2Token(token, options) {
            return localVarFp.revokeOAuth2Token(token, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
         * @summary OpenID Connect Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfo(options) {
            return localVarFp.userinfo(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
         * @summary JSON Web Keys Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnown(options) {
            return localVarFp.wellKnown(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
class PublicApi extends base_1.BaseAPI {
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
     * @summary OpenID Connect Front-Backchannel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    disconnectUser(options) {
        return exports.PublicApiFp(this.configuration).disconnectUser(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    discoverOpenIDConfiguration(options) {
        return exports.PublicApiFp(this.configuration).discoverOpenIDConfiguration(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client, options) {
        return exports.PublicApiFp(this.configuration).dynamicClientRegistrationCreateOAuth2Client(oAuth2Client, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    dynamicClientRegistrationDeleteOAuth2Client(id, options) {
        return exports.PublicApiFp(this.configuration).dynamicClientRegistrationDeleteOAuth2Client(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    dynamicClientRegistrationGetOAuth2Client(id, options) {
        return exports.PublicApiFp(this.configuration).dynamicClientRegistrationGetOAuth2Client(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    dynamicClientRegistrationUpdateOAuth2Client(id, oAuth2Client, options) {
        return exports.PublicApiFp(this.configuration).dynamicClientRegistrationUpdateOAuth2Client(id, oAuth2Client, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    oauth2Token(grantType, clientId, code, redirectUri, refreshToken, options) {
        return exports.PublicApiFp(this.configuration).oauth2Token(grantType, clientId, code, redirectUri, refreshToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    oauthAuth(options) {
        return exports.PublicApiFp(this.configuration).oauthAuth(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke OAuth2 Tokens
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    revokeOAuth2Token(token, options) {
        return exports.PublicApiFp(this.configuration).revokeOAuth2Token(token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    userinfo(options) {
        return exports.PublicApiFp(this.configuration).userinfo(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary JSON Web Keys Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    wellKnown(options) {
        return exports.PublicApiFp(this.configuration).wellKnown(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PublicApi = PublicApi;
