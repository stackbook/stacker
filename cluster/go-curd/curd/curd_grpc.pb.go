// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: curd/curd.proto

package curd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurdServiceClient is the client API for CurdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurdServiceClient interface {
	CreateCurd(ctx context.Context, in *CreateCurdReq, opts ...grpc.CallOption) (*CreateCurdRes, error)
	ReadCurd(ctx context.Context, in *ReadCurdReq, opts ...grpc.CallOption) (*ReadCurdRes, error)
	UpdateCurd(ctx context.Context, in *UpdateCurdReq, opts ...grpc.CallOption) (*UpdateCurdRes, error)
	DeleteCurd(ctx context.Context, in *DeleteCurdReq, opts ...grpc.CallOption) (*DeleteCurdRes, error)
	ListCurds(ctx context.Context, in *ListCurdsReq, opts ...grpc.CallOption) (CurdService_ListCurdsClient, error)
}

type curdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurdServiceClient(cc grpc.ClientConnInterface) CurdServiceClient {
	return &curdServiceClient{cc}
}

func (c *curdServiceClient) CreateCurd(ctx context.Context, in *CreateCurdReq, opts ...grpc.CallOption) (*CreateCurdRes, error) {
	out := new(CreateCurdRes)
	err := c.cc.Invoke(ctx, "/curd.CurdService/CreateCurd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curdServiceClient) ReadCurd(ctx context.Context, in *ReadCurdReq, opts ...grpc.CallOption) (*ReadCurdRes, error) {
	out := new(ReadCurdRes)
	err := c.cc.Invoke(ctx, "/curd.CurdService/ReadCurd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curdServiceClient) UpdateCurd(ctx context.Context, in *UpdateCurdReq, opts ...grpc.CallOption) (*UpdateCurdRes, error) {
	out := new(UpdateCurdRes)
	err := c.cc.Invoke(ctx, "/curd.CurdService/UpdateCurd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curdServiceClient) DeleteCurd(ctx context.Context, in *DeleteCurdReq, opts ...grpc.CallOption) (*DeleteCurdRes, error) {
	out := new(DeleteCurdRes)
	err := c.cc.Invoke(ctx, "/curd.CurdService/DeleteCurd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curdServiceClient) ListCurds(ctx context.Context, in *ListCurdsReq, opts ...grpc.CallOption) (CurdService_ListCurdsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CurdService_ServiceDesc.Streams[0], "/curd.CurdService/ListCurds", opts...)
	if err != nil {
		return nil, err
	}
	x := &curdServiceListCurdsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CurdService_ListCurdsClient interface {
	Recv() (*ListCurdsRes, error)
	grpc.ClientStream
}

type curdServiceListCurdsClient struct {
	grpc.ClientStream
}

func (x *curdServiceListCurdsClient) Recv() (*ListCurdsRes, error) {
	m := new(ListCurdsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CurdServiceServer is the server API for CurdService service.
// All implementations must embed UnimplementedCurdServiceServer
// for forward compatibility
type CurdServiceServer interface {
	CreateCurd(context.Context, *CreateCurdReq) (*CreateCurdRes, error)
	ReadCurd(context.Context, *ReadCurdReq) (*ReadCurdRes, error)
	UpdateCurd(context.Context, *UpdateCurdReq) (*UpdateCurdRes, error)
	DeleteCurd(context.Context, *DeleteCurdReq) (*DeleteCurdRes, error)
	ListCurds(*ListCurdsReq, CurdService_ListCurdsServer) error
	mustEmbedUnimplementedCurdServiceServer()
}

// UnimplementedCurdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurdServiceServer struct {
}

func (UnimplementedCurdServiceServer) CreateCurd(context.Context, *CreateCurdReq) (*CreateCurdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurd not implemented")
}
func (UnimplementedCurdServiceServer) ReadCurd(context.Context, *ReadCurdReq) (*ReadCurdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCurd not implemented")
}
func (UnimplementedCurdServiceServer) UpdateCurd(context.Context, *UpdateCurdReq) (*UpdateCurdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurd not implemented")
}
func (UnimplementedCurdServiceServer) DeleteCurd(context.Context, *DeleteCurdReq) (*DeleteCurdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurd not implemented")
}
func (UnimplementedCurdServiceServer) ListCurds(*ListCurdsReq, CurdService_ListCurdsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCurds not implemented")
}
func (UnimplementedCurdServiceServer) mustEmbedUnimplementedCurdServiceServer() {}

// UnsafeCurdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurdServiceServer will
// result in compilation errors.
type UnsafeCurdServiceServer interface {
	mustEmbedUnimplementedCurdServiceServer()
}

func RegisterCurdServiceServer(s grpc.ServiceRegistrar, srv CurdServiceServer) {
	s.RegisterService(&CurdService_ServiceDesc, srv)
}

func _CurdService_CreateCurd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurdServiceServer).CreateCurd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/curd.CurdService/CreateCurd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurdServiceServer).CreateCurd(ctx, req.(*CreateCurdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurdService_ReadCurd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCurdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurdServiceServer).ReadCurd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/curd.CurdService/ReadCurd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurdServiceServer).ReadCurd(ctx, req.(*ReadCurdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurdService_UpdateCurd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurdServiceServer).UpdateCurd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/curd.CurdService/UpdateCurd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurdServiceServer).UpdateCurd(ctx, req.(*UpdateCurdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurdService_DeleteCurd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurdServiceServer).DeleteCurd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/curd.CurdService/DeleteCurd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurdServiceServer).DeleteCurd(ctx, req.(*DeleteCurdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurdService_ListCurds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCurdsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurdServiceServer).ListCurds(m, &curdServiceListCurdsServer{stream})
}

type CurdService_ListCurdsServer interface {
	Send(*ListCurdsRes) error
	grpc.ServerStream
}

type curdServiceListCurdsServer struct {
	grpc.ServerStream
}

func (x *curdServiceListCurdsServer) Send(m *ListCurdsRes) error {
	return x.ServerStream.SendMsg(m)
}

// CurdService_ServiceDesc is the grpc.ServiceDesc for CurdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "curd.CurdService",
	HandlerType: (*CurdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCurd",
			Handler:    _CurdService_CreateCurd_Handler,
		},
		{
			MethodName: "ReadCurd",
			Handler:    _CurdService_ReadCurd_Handler,
		},
		{
			MethodName: "UpdateCurd",
			Handler:    _CurdService_UpdateCurd_Handler,
		},
		{
			MethodName: "DeleteCurd",
			Handler:    _CurdService_DeleteCurd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCurds",
			Handler:       _CurdService_ListCurds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "curd/curd.proto",
}
